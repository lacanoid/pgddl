\pset null _null_
\pset format unaligned
SET client_min_messages = warning;
SET ROLE postgres;
create type test_type_e as enum ('foo','bar','baz','qux');
comment on type test_type_e is 'my enum';
select ddlx_script('test_type_e'::regtype,'{owner}');
ddlx_script
BEGIN;

/*
DROP TYPE test_type_e;
*/

CREATE TYPE test_type_e AS ENUM (
 'foo',
 'bar',
 'baz',
 'qux'
);

COMMENT ON TYPE test_type_e IS 'my enum';

ALTER TYPE test_type_e OWNER TO postgres;

END;

(1 row)
create domain test_type_d numeric(10,2) check(value is not null) check(value>6) default 7;
comment on type test_type_d is 'my domain';
select ddlx_script('test_type_d'::regtype,'{owner}');
ddlx_script
BEGIN;

/*
DROP DOMAIN test_type_d;
*/

CREATE DOMAIN test_type_d AS numeric(10,2)
  CHECK ((VALUE IS NOT NULL))
  CHECK ((VALUE > (6)::numeric))
  DEFAULT 7;

COMMENT ON DOMAIN test_type_d IS 'my domain';

ALTER DOMAIN test_type_d OWNER TO postgres;

END;

(1 row)
create type test_type_c as (i integer, t text, d test_type_d);
comment on type test_type_c is 'my class type';
comment on column test_type_c.i is 'my class class column i';
select classid::regclass, sql_kind, sql_identifier from ddlx_identify('test_type_c'::regtype);
classid|sql_kind|sql_identifier
pg_type|TYPE|test_type_c
(1 row)
select classid::regclass, sql_kind, sql_identifier from ddlx_identify('test_type_c'::regclass);
classid|sql_kind|sql_identifier
pg_type|TYPE|test_type_c
(1 row)
select ddlx_script('test_type_c'::regtype);
ddlx_script
BEGIN;

/*
DROP TYPE test_type_c;
*/


-- Type: TYPE ; Name: test_type_c; Owner: postgres

CREATE TYPE test_type_c AS (
    i integer,
    t text,
    d test_type_d
  );
COMMENT ON COLUMN test_type_c.i IS 'my class class column i';

COMMENT ON TYPE test_type_c IS 'my class type';


END;

(1 row)
select ddlx_script('test_type_c'::regclass);
ddlx_script
BEGIN;

/*
DROP TYPE test_type_c;
*/


-- Type: TYPE ; Name: test_type_c; Owner: postgres

CREATE TYPE test_type_c AS (
    i integer,
    t text,
    d test_type_d
  );
COMMENT ON COLUMN test_type_c.i IS 'my class class column i';

COMMENT ON TYPE test_type_c IS 'my class type';


END;

(1 row)
create domain test_collation_d text collate "C" default '***';
select ddlx_script('test_collation_d'::regtype);
ddlx_script
BEGIN;

/*
DROP DOMAIN test_collation_d;
*/

CREATE DOMAIN test_collation_d AS text
  COLLATE "C"
  DEFAULT '***'::text;



END;

(1 row)
create type int_t;
CREATE OR REPLACE FUNCTION int_t4in(cstring)
 RETURNS int_t
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int4in$function$;
CREATE OR REPLACE FUNCTION int_t4out(int_t)
 RETURNS cstring
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int4out$function$;
CREATE OR REPLACE FUNCTION int_t4send(int_t)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int4send$function$;
CREATE OR REPLACE FUNCTION int_t4recv(internal)
 RETURNS int_t
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int4recv$function$;
CREATE TYPE int_t (
  INPUT = int_t4in,
  OUTPUT = int_t4out,
  SEND = int_t4send,
  RECEIVE = int_t4recv,
  INTERNALLENGTH = 4,
  PASSEDBYVALUE,
  ALIGNMENT = int4,
  STORAGE = plain,
  CATEGORY = 'N',
  DELIMITER = ',',
  COLLATABLE = false
);
COMMENT ON TYPE int_t IS '-2 billion to 2 billion integer, 4-byte storage (test)';
ALTER TYPE int_t OWNER TO postgres;
select ddlx_create('int_t'::regtype);
ddlx_create
CREATE TYPE int_t (
  INPUT = int_t4in,
  OUTPUT = int_t4out,
  SEND = int_t4send,
  RECEIVE = int_t4recv,
  INTERNALLENGTH = 4,
  PASSEDBYVALUE,
  ALIGNMENT = int4,
  STORAGE = plain,
  CATEGORY = 'N',
  DELIMITER = ',',
  COLLATABLE = false
);

COMMENT ON TYPE int_t IS '-2 billion to 2 billion integer, 4-byte storage (test)';


(1 row)
select ddlx_script('int_t'::regtype);
ddlx_script
BEGIN;

/*
DROP FUNCTION int_t4recv(internal);
DROP FUNCTION int_t4send(int_t);
DROP FUNCTION int_t4out(int_t);
DROP FUNCTION int_t4in(cstring);

DROP TYPE int_t;
*/

CREATE TYPE int_t;

CREATE OR REPLACE FUNCTION public.int_t4in(cstring)
 RETURNS int_t
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int4in$function$;

CREATE OR REPLACE FUNCTION public.int_t4out(int_t)
 RETURNS cstring
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int4out$function$;

CREATE OR REPLACE FUNCTION public.int_t4send(int_t)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int4send$function$;

CREATE OR REPLACE FUNCTION public.int_t4recv(internal)
 RETURNS int_t
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int4recv$function$;

CREATE TYPE int_t (
  INPUT = int_t4in,
  OUTPUT = int_t4out,
  SEND = int_t4send,
  RECEIVE = int_t4recv,
  INTERNALLENGTH = 4,
  PASSEDBYVALUE,
  ALIGNMENT = int4,
  STORAGE = plain,
  CATEGORY = 'N',
  DELIMITER = ',',
  COLLATABLE = false
);

COMMENT ON TYPE int_t IS '-2 billion to 2 billion integer, 4-byte storage (test)';


-- DEPENDANTS


-- Type: FUNCTION ; Name: int_t4in(cstring); Owner: postgres

CREATE OR REPLACE FUNCTION public.int_t4in(cstring)
 RETURNS int_t
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int4in$function$;


REVOKE ALL ON FUNCTION int_t4in(cstring) FROM PUBLIC;
GRANT EXECUTE ON FUNCTION int_t4in(cstring) TO PUBLIC;
GRANT EXECUTE ON FUNCTION int_t4in(cstring) TO postgres WITH GRANT OPTION;

-- Type: FUNCTION ; Name: int_t4out(int_t); Owner: postgres

CREATE OR REPLACE FUNCTION public.int_t4out(int_t)
 RETURNS cstring
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int4out$function$;


REVOKE ALL ON FUNCTION int_t4out(int_t) FROM PUBLIC;
GRANT EXECUTE ON FUNCTION int_t4out(int_t) TO PUBLIC;
GRANT EXECUTE ON FUNCTION int_t4out(int_t) TO postgres WITH GRANT OPTION;

-- Type: FUNCTION ; Name: int_t4send(int_t); Owner: postgres

CREATE OR REPLACE FUNCTION public.int_t4send(int_t)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int4send$function$;


REVOKE ALL ON FUNCTION int_t4send(int_t) FROM PUBLIC;
GRANT EXECUTE ON FUNCTION int_t4send(int_t) TO PUBLIC;
GRANT EXECUTE ON FUNCTION int_t4send(int_t) TO postgres WITH GRANT OPTION;

-- Type: FUNCTION ; Name: int_t4recv(internal); Owner: postgres

CREATE OR REPLACE FUNCTION public.int_t4recv(internal)
 RETURNS int_t
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int4recv$function$;


REVOKE ALL ON FUNCTION int_t4recv(internal) FROM PUBLIC;
GRANT EXECUTE ON FUNCTION int_t4recv(internal) TO PUBLIC;
GRANT EXECUTE ON FUNCTION int_t4recv(internal) TO postgres WITH GRANT OPTION;

END;

(1 row)
/*
select replace(ddlx_create('int_t[]'::regtype),'PARALLEL SAFE ','');

select ddlx_script('daterange'::regtype);

select ddlx_script('=(integer,integer)'::regoperator);
select ddlx_script('=(text,text)'::regoperator);
*/
