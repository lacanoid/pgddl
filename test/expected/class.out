\pset null _null_
\pset format unaligned
SET client_min_messages = warning;
SET ROLE postgres;
select sql_kind, sql_identifier from ddlx_identify('ddlx_identify(oid)'::regprocedure);
sql_kind|sql_identifier
FUNCTION|ddlx_identify(oid)
(1 row)
create function trig() returns trigger as 
$$begin return old; end $$
language plpgsql;
CREATE TABLE test_class_r (
  a serial primary key, 
  b text unique not null default e'Hello, world!\n', 
  c timestamp without time zone check(c > '2001-01-01'), 
  d timestamp with time zone,
  e numeric(30)[],
  f numeric(10,2)[],
  g varchar(10)[],
  h varchar[],
  v tsvector
);
COMMENT ON TABLE test_class_r IS 'Comment1';
alter table test_class_r alter e set (n_distinct=10);
alter table test_class_r alter f set (n_distinct=100);
alter table test_class_r alter h set statistics 50;
grant all on test_class_r to public;
select classid::regclass, sql_kind, sql_identifier from ddlx_identify('test_class_r'::regtype);
classid|sql_kind|sql_identifier
pg_class|TABLE|test_class_r
(1 row)
select classid::regclass, sql_kind, sql_identifier from ddlx_identify('test_class_r'::regclass);
classid|sql_kind|sql_identifier
pg_class|TABLE|test_class_r
(1 row)
alter table test_class_r alter h set storage external;
create trigger aaaa before 
update on test_class_r
   for each row when (old.* is distinct from new.*) execute procedure trig('AAAA');
alter table test_class_r disable trigger aaaa;
create unique index idx1 on test_class_r (lower(b)) where b is not null;
create index idx2 on test_class_r using gin (v);
create index idx3 on test_class_r(g) with (fillfactor=50);
cluster test_class_r using idx3;
SELECT replace(ddlx_script('test_class_r'::regclass,'{owner}'),'FUNCTION','PROCEDURE') as ddlx_script;
ddlx_script
BEGIN;

/*
ALTER TABLE test_class_r ALTER a DROP DEFAULT;
ALTER TABLE test_class_r DROP CONSTRAINT test_class_r_c_check;

DROP TABLE test_class_r; --==>> !!! ATTENTION !!! <<==--
*/


-- Type: TABLE ; Name: test_class_r; Owner: postgres

CREATE TABLE test_class_r (
    a integer NOT NULL,
    b text NOT NULL,
    c timestamp without time zone,
    d timestamp with time zone,
    e numeric(30,0)[],
    f numeric(10,2)[],
    g character varying(10)[],
    h character varying[],
    v tsvector
);

COMMENT ON TABLE test_class_r IS 'Comment1';

ALTER TABLE test_class_r OWNER TO postgres;
ALTER TABLE test_class_r ALTER h SET STORAGE external;

ALTER TABLE test_class_r ALTER b SET DEFAULT 'Hello, world!
'::text;

CREATE SEQUENCE IF NOT EXISTS test_class_r_a_seq;
ALTER SEQUENCE test_class_r_a_seq OWNER TO postgres;
ALTER SEQUENCE test_class_r_a_seq OWNED BY test_class_r.a;

ALTER TABLE test_class_r ALTER e SET ( n_distinct = '10' );
ALTER TABLE test_class_r ALTER f SET ( n_distinct = '100' );

ALTER TABLE test_class_r ALTER h SET STATISTICS 50;

ALTER TABLE test_class_r ADD CONSTRAINT test_class_r_b_key UNIQUE (b);
ALTER TABLE test_class_r ADD CONSTRAINT test_class_r_pkey PRIMARY KEY (a);

CREATE UNIQUE INDEX idx1 ON public.test_class_r USING btree (lower(b)) WHERE (b IS NOT NULL);
CREATE INDEX idx2 ON public.test_class_r USING gin (v);
CREATE INDEX idx3 ON public.test_class_r USING btree (g) WITH (fillfactor='50');

CLUSTER test_class_r USING idx3;
CREATE TRIGGER aaaa BEFORE UPDATE ON test_class_r FOR EACH ROW WHEN (old.* IS DISTINCT FROM new.*) EXECUTE PROCEDURE trig('AAAA');
ALTER TABLE test_class_r DISABLE TRIGGER aaaa;

GRANT DELETE ON test_class_r TO PUBLIC;
GRANT INSERT ON test_class_r TO PUBLIC;
GRANT REFERENCES ON test_class_r TO PUBLIC;
GRANT SELECT ON test_class_r TO PUBLIC;
GRANT TRIGGER ON test_class_r TO PUBLIC;
GRANT TRUNCATE ON test_class_r TO PUBLIC;
GRANT UPDATE ON test_class_r TO PUBLIC;

-- DEPENDANTS

ALTER TABLE test_class_r ADD CONSTRAINT test_class_r_c_check
      CHECK (c > 'Mon Jan 01 00:00:00 2001'::timestamp without time zone);

ALTER TABLE test_class_r ALTER a SET DEFAULT nextval('test_class_r_a_seq'::regclass);

END;

(1 row)
cluster test_class_r using test_class_r_pkey;
SELECT replace(ddlx_script('test_class_r'::regtype,'{owner}'),'FUNCTION','PROCEDURE') as ddlx_script;
ddlx_script
BEGIN;

/*
DROP TABLE test_class_r; --==>> !!! ATTENTION !!! <<==--
*/


-- Type: TABLE ; Name: test_class_r; Owner: postgres

CREATE TABLE test_class_r (
    a integer NOT NULL,
    b text NOT NULL,
    c timestamp without time zone,
    d timestamp with time zone,
    e numeric(30,0)[],
    f numeric(10,2)[],
    g character varying(10)[],
    h character varying[],
    v tsvector
);

COMMENT ON TABLE test_class_r IS 'Comment1';

ALTER TABLE test_class_r OWNER TO postgres;
ALTER TABLE test_class_r ALTER h SET STORAGE external;

ALTER TABLE test_class_r ALTER b SET DEFAULT 'Hello, world!
'::text;

CREATE SEQUENCE IF NOT EXISTS test_class_r_a_seq;
ALTER SEQUENCE test_class_r_a_seq OWNER TO postgres;
ALTER SEQUENCE test_class_r_a_seq OWNED BY test_class_r.a;

ALTER TABLE test_class_r ALTER e SET ( n_distinct = '10' );
ALTER TABLE test_class_r ALTER f SET ( n_distinct = '100' );

ALTER TABLE test_class_r ALTER h SET STATISTICS 50;

ALTER TABLE test_class_r ADD CONSTRAINT test_class_r_b_key UNIQUE (b);
ALTER TABLE test_class_r ADD CONSTRAINT test_class_r_pkey PRIMARY KEY (a);

CREATE UNIQUE INDEX idx1 ON public.test_class_r USING btree (lower(b)) WHERE (b IS NOT NULL);
CREATE INDEX idx2 ON public.test_class_r USING gin (v);
CREATE INDEX idx3 ON public.test_class_r USING btree (g) WITH (fillfactor='50');

CLUSTER test_class_r USING test_class_r_pkey;
CREATE TRIGGER aaaa BEFORE UPDATE ON test_class_r FOR EACH ROW WHEN (old.* IS DISTINCT FROM new.*) EXECUTE PROCEDURE trig('AAAA');
ALTER TABLE test_class_r DISABLE TRIGGER aaaa;

GRANT DELETE ON test_class_r TO PUBLIC;
GRANT INSERT ON test_class_r TO PUBLIC;
GRANT REFERENCES ON test_class_r TO PUBLIC;
GRANT SELECT ON test_class_r TO PUBLIC;
GRANT TRIGGER ON test_class_r TO PUBLIC;
GRANT TRUNCATE ON test_class_r TO PUBLIC;
GRANT UPDATE ON test_class_r TO PUBLIC;

END;

(1 row)
SELECT ddlx_script('idx1'::regclass,'{owner}');
ddlx_script
BEGIN;

/*
DROP INDEX idx1;
*/


-- Type: INDEX ; Name: idx1; Owner: postgres

CREATE UNIQUE INDEX idx1 ON public.test_class_r USING btree (lower(b)) WHERE (b IS NOT NULL);



END;

(1 row)
SELECT ddlx_script('idx2'::regclass,'{owner}');
ddlx_script
BEGIN;

/*
DROP INDEX idx2;
*/


-- Type: INDEX ; Name: idx2; Owner: postgres

CREATE INDEX idx2 ON public.test_class_r USING gin (v);



END;

(1 row)
CREATE UNLOGGED TABLE test_class_r2 (
  i  serial, 
  a  int,
  cc char(20),
  vv varchar(20),
  n  numeric(10,2),
  constraint "blah" foreign key (a) references test_class_r(a)
 );
-- alter table test_class_r2 set with oids;
alter table test_class_r2 add  constraint "blah2" foreign key (a) references test_class_r(a) deferrable initially deferred not valid;
SELECT ddlx_script('test_class_r2'::regclass);
ddlx_script
BEGIN;

/*
ALTER TABLE test_class_r2 ALTER i DROP DEFAULT;

DROP TABLE test_class_r2; --==>> !!! ATTENTION !!! <<==--
*/


-- Type: TABLE ; Name: test_class_r2; Owner: postgres

CREATE UNLOGGED TABLE test_class_r2 (
    i integer NOT NULL,
    a integer,
    cc character(20),
    vv character varying(20),
    n numeric(10,2)
);


CREATE SEQUENCE IF NOT EXISTS test_class_r2_i_seq;
ALTER SEQUENCE test_class_r2_i_seq OWNED BY test_class_r2.i;

ALTER TABLE test_class_r2 ADD CONSTRAINT blah FOREIGN KEY (a) REFERENCES test_class_r(a);
ALTER TABLE test_class_r2 ADD CONSTRAINT blah2 FOREIGN KEY (a) REFERENCES test_class_r(a) DEFERRABLE INITIALLY DEFERRED NOT VALID;


-- DEPENDANTS

ALTER TABLE test_class_r2 ALTER i SET DEFAULT nextval('test_class_r2_i_seq'::regclass);

END;

(1 row)
CREATE VIEW test_class_v AS
SELECT * FROM test_class_r;
grant select on test_class_v to public;
SELECT replace(ddlx_script('test_class_v'::regclass,'{owner}'),'test_class_r.','');
replace
BEGIN;

/*
DROP VIEW test_class_v;
*/


-- Type: VIEW ; Name: test_class_v; Owner: postgres

CREATE OR REPLACE VIEW test_class_v AS
 SELECT a,
    b,
    c,
    d,
    e,
    f,
    g,
    h,
    v
   FROM test_class_r;


ALTER VIEW test_class_v OWNER TO postgres;
GRANT SELECT ON test_class_v TO PUBLIC;

END;

(1 row)
SELECT replace(ddlx_script('test_class_v'::regtype,'{owner}'),'test_class_r.','');
replace
BEGIN;

/*
DROP VIEW test_class_v;
*/


-- Type: VIEW ; Name: test_class_v; Owner: postgres

CREATE OR REPLACE VIEW test_class_v AS
 SELECT a,
    b,
    c,
    d,
    e,
    f,
    g,
    h,
    v
   FROM test_class_r;


ALTER VIEW test_class_v OWNER TO postgres;
GRANT SELECT ON test_class_v TO PUBLIC;

END;

(1 row)
CREATE VIEW test_class_v2 AS
SELECT * FROM test_class_v;
grant select (a,b,c) on test_class_v2 to public;
SELECT regexp_replace(ddlx_script('test_class_v'::regclass,'{owner}'),'test_class_[rv]\.','','g');
regexp_replace
BEGIN;

/*
DROP VIEW test_class_v2;

DROP VIEW test_class_v;
*/


-- Type: VIEW ; Name: test_class_v; Owner: postgres

CREATE OR REPLACE VIEW test_class_v AS
 SELECT a,
    b,
    c,
    d,
    e,
    f,
    g,
    h,
    v
   FROM test_class_r;


ALTER VIEW test_class_v OWNER TO postgres;
GRANT SELECT ON test_class_v TO PUBLIC;

-- DEPENDANTS


-- Type: VIEW ; Name: test_class_v2; Owner: postgres

CREATE OR REPLACE VIEW test_class_v2 AS
 SELECT a,
    b,
    c,
    d,
    e,
    f,
    g,
    h,
    v
   FROM test_class_v;


ALTER VIEW test_class_v2 OWNER TO postgres;
GRANT SELECT (a) ON test_class_v2 TO PUBLIC;
GRANT SELECT (b) ON test_class_v2 TO PUBLIC;
GRANT SELECT (c) ON test_class_v2 TO PUBLIC;

END;

(1 row)
CREATE MATERIALIZED VIEW test_class_m AS
SELECT * FROM test_class_r;
create unique index test_class_mi ON test_class_m (a);
grant select on test_class_m to public;
SELECT replace(ddlx_script('test_class_m'::regclass,'{owner}'),'test_class_r.','');;
replace
BEGIN;

/*
DROP MATERIALIZED VIEW test_class_m;
*/


-- Type: MATERIALIZED VIEW ; Name: test_class_m; Owner: postgres

CREATE MATERIALIZED VIEW test_class_m AS
 SELECT a,
    b,
    c,
    d,
    e,
    f,
    g,
    h,
    v
   FROM test_class_r;


ALTER MATERIALIZED VIEW test_class_m OWNER TO postgres;
CREATE UNIQUE INDEX test_class_mi ON public.test_class_m USING btree (a);

GRANT SELECT ON test_class_m TO PUBLIC;

END;

(1 row)
select sql_kind, sql_identifier from ddlx_identify('ddlx_identify(oid)'::regprocedure);
sql_kind|sql_identifier
FUNCTION|ddlx_identify(oid)
(1 row)
create function funfun(a int, b text default null, out c numeric, out d text) returns setof record as 
$$ select 3.14, 'now'::text $$ language sql cost 123 rows 19
set xmloption = content
;
comment on function funfun(int,text) is 'Use more comments!';
select * from funfun(1);
c|d
3.14|now
(1 row)
SELECT ddlx_script('funfun'::regproc);
ddlx_script
BEGIN;

/*
DROP FUNCTION funfun(integer,text);
*/


-- Type: FUNCTION ; Name: funfun(integer,text); Owner: postgres

CREATE OR REPLACE FUNCTION public.funfun(a integer, b text DEFAULT NULL::text, OUT c numeric, OUT d text)
 RETURNS SETOF record
 LANGUAGE sql
 COST 123 ROWS 19
 SET xmloption TO 'content'
AS $function$ select 3.14, 'now'::text $function$;

COMMENT ON FUNCTION funfun(integer,text) IS 'Use more comments!';

REVOKE ALL ON FUNCTION funfun(integer,text) FROM PUBLIC;
GRANT EXECUTE ON FUNCTION funfun(integer,text) TO PUBLIC;
GRANT EXECUTE ON FUNCTION funfun(integer,text) TO postgres WITH GRANT OPTION;

END;

(1 row)
SELECT ddlx_script('funfun(int,text)'::regprocedure,'{owner}');
ddlx_script
BEGIN;

/*
DROP FUNCTION funfun(integer,text);
*/


-- Type: FUNCTION ; Name: funfun(integer,text); Owner: postgres

CREATE OR REPLACE FUNCTION public.funfun(a integer, b text DEFAULT NULL::text, OUT c numeric, OUT d text)
 RETURNS SETOF record
 LANGUAGE sql
 COST 123 ROWS 19
 SET xmloption TO 'content'
AS $function$ select 3.14, 'now'::text $function$;

COMMENT ON FUNCTION funfun(integer,text) IS 'Use more comments!';

ALTER FUNCTION funfun(integer,text) OWNER TO postgres;
REVOKE ALL ON FUNCTION funfun(integer,text) FROM PUBLIC;
GRANT EXECUTE ON FUNCTION funfun(integer,text) TO PUBLIC;
GRANT EXECUTE ON FUNCTION funfun(integer,text) TO postgres WITH GRANT OPTION;

END;

(1 row)
create sequence test_type_S increment 4 start 2;
comment on sequence test_type_S is 'interleave';
select ddlx_script('test_type_S'::regclass);
ddlx_script
BEGIN;

/*
DROP SEQUENCE IF EXISTS test_type_s;
*/


-- Type: SEQUENCE ; Name: test_type_s; Owner: postgres

CREATE SEQUENCE test_type_s;

COMMENT ON SEQUENCE test_type_s IS 'interleave';

ALTER SEQUENCE test_type_s
 INCREMENT BY 4
 MINVALUE 1
 MAXVALUE 9223372036854775807
 START WITH 2
 NO CYCLE;

END;

(1 row)
create table test_collation (
	id serial,
	c text collate "C" not null,
	t text
);
select ddlx_script('test_collation'::regclass);
ddlx_script
BEGIN;

/*
ALTER TABLE test_collation ALTER id DROP DEFAULT;

DROP TABLE test_collation; --==>> !!! ATTENTION !!! <<==--
*/


-- Type: TABLE ; Name: test_collation; Owner: postgres

CREATE TABLE test_collation (
    id integer NOT NULL,
    c text COLLATE "C" NOT NULL,
    t text
);


CREATE SEQUENCE IF NOT EXISTS test_collation_id_seq;
ALTER SEQUENCE test_collation_id_seq OWNED BY test_collation.id;


-- DEPENDANTS

ALTER TABLE test_collation ALTER id SET DEFAULT nextval('test_collation_id_seq'::regclass);

END;

(1 row)
create view test_class_v_opt2 
as select * from test_class_v order by 1;
alter  view test_class_v_opt2 set (security_barrier='true');
select replace(ddlx_script('test_class_v_opt2'::regclass),'test_class_v.','');;
replace
BEGIN;

/*
DROP VIEW test_class_v_opt2;
*/


-- Type: VIEW ; Name: test_class_v_opt2; Owner: postgres

CREATE OR REPLACE VIEW test_class_v_opt2 AS
 SELECT a,
    b,
    c,
    d,
    e,
    f,
    g,
    h,
    v
   FROM test_class_v
  ORDER BY a;

ALTER VIEW test_class_v_opt2 SET (security_barrier='true');



END;

(1 row)
select replace(ddlx_script('test_class_v_opt2'::regclass::oid),'test_class_v.','');;
replace
BEGIN;

/*
DROP VIEW test_class_v_opt2;
*/


-- Type: VIEW ; Name: test_class_v_opt2; Owner: postgres

CREATE OR REPLACE VIEW test_class_v_opt2 AS
 SELECT a,
    b,
    c,
    d,
    e,
    f,
    g,
    h,
    v
   FROM test_class_v
  ORDER BY a;

ALTER VIEW test_class_v_opt2 SET (security_barrier='true');



END;

(1 row)
select replace(ddlx_script('test_class_v_opt2'),'test_class_v.','');;
replace
BEGIN;

/*
DROP VIEW test_class_v_opt2;
*/


-- Type: VIEW ; Name: test_class_v_opt2; Owner: postgres

CREATE OR REPLACE VIEW test_class_v_opt2 AS
 SELECT a,
    b,
    c,
    d,
    e,
    f,
    g,
    h,
    v
   FROM test_class_v
  ORDER BY a;

ALTER VIEW test_class_v_opt2 SET (security_barrier='true');



END;

(1 row)
create or replace function test_proc_1() returns text as
$$ select 'Hello, world!'::text $$ language sql;
create or replace function test_proc_2(integer) returns text strict as
$$ select b from test_class_r where a = $1 $$ language sql;
select ddlx_script('test_proc_1'::regproc);
ddlx_script
BEGIN;

/*
DROP FUNCTION test_proc_1();
*/


-- Type: FUNCTION ; Name: test_proc_1(); Owner: postgres

CREATE OR REPLACE FUNCTION public.test_proc_1()
 RETURNS text
 LANGUAGE sql
AS $function$ select 'Hello, world!'::text $function$;


REVOKE ALL ON FUNCTION test_proc_1() FROM PUBLIC;
GRANT EXECUTE ON FUNCTION test_proc_1() TO PUBLIC;
GRANT EXECUTE ON FUNCTION test_proc_1() TO postgres WITH GRANT OPTION;

END;

(1 row)
select ddlx_script('test_proc_1'::regproc::oid);
ddlx_script
BEGIN;

/*
DROP FUNCTION test_proc_1();
*/


-- Type: FUNCTION ; Name: test_proc_1(); Owner: postgres

CREATE OR REPLACE FUNCTION public.test_proc_1()
 RETURNS text
 LANGUAGE sql
AS $function$ select 'Hello, world!'::text $function$;


REVOKE ALL ON FUNCTION test_proc_1() FROM PUBLIC;
GRANT EXECUTE ON FUNCTION test_proc_1() TO PUBLIC;
GRANT EXECUTE ON FUNCTION test_proc_1() TO postgres WITH GRANT OPTION;

END;

(1 row)
select ddlx_script('test_proc_1()');
ddlx_script
BEGIN;

/*
DROP FUNCTION test_proc_1();
*/


-- Type: FUNCTION ; Name: test_proc_1(); Owner: postgres

CREATE OR REPLACE FUNCTION public.test_proc_1()
 RETURNS text
 LANGUAGE sql
AS $function$ select 'Hello, world!'::text $function$;


REVOKE ALL ON FUNCTION test_proc_1() FROM PUBLIC;
GRANT EXECUTE ON FUNCTION test_proc_1() TO PUBLIC;
GRANT EXECUTE ON FUNCTION test_proc_1() TO postgres WITH GRANT OPTION;

END;

(1 row)
CREATE AGGREGATE test_proc_agg_1(text) (
    SFUNC = textcat,
    STYPE = text
);
select ddlx_script('test_proc_agg_1'::regproc);
ddlx_script
BEGIN;

/*
DROP AGGREGATE test_proc_agg_1(text);
*/


-- Type: AGGREGATE ; Name: test_proc_agg_1(text); Owner: postgres

CREATE AGGREGATE test_proc_agg_1(text) (
  SFUNC = textcat,
  STYPE = text
);


REVOKE ALL ON AGGREGATE test_proc_agg_1(text) FROM PUBLIC;
GRANT EXECUTE ON AGGREGATE test_proc_agg_1(text) TO PUBLIC;
GRANT EXECUTE ON AGGREGATE test_proc_agg_1(text) TO postgres WITH GRANT OPTION;

END;

(1 row)
/*
CREATE AGGREGATE test_proc_agg_2(anyelement) (
    SFUNC = array_append,
    STYPE = anyarray,
    INITCOND = '{}'
);

select ddlx_script('test_proc_agg_2'::regproc);
*/
-----
create table test_parent ( i serial );
create table test_child () inherits (test_parent);
select ddlx_create('test_parent'::regclass); 
ddlx_create

-- Type: TABLE ; Name: test_parent; Owner: postgres

CREATE TABLE test_parent (
    i integer NOT NULL
);


ALTER SEQUENCE test_parent_i_seq OWNED BY test_parent.i;


(1 row)
select ddlx_create('test_child'::regclass); 
ddlx_create

-- Type: TABLE ; Name: test_child; Owner: postgres

CREATE TABLE test_child ()
  INHERITS(test_parent);


ALTER TABLE test_child ALTER i SET DEFAULT nextval('test_parent_i_seq'::regclass);


(1 row)
-----
-- test pre-data and post-data functions
select ddlx_createonly('test_class_r'::regclass);
ddlx_createonly

-- Type: TABLE ; Name: test_class_r; Owner: postgres

CREATE TABLE test_class_r (
    a integer NOT NULL,
    b text NOT NULL,
    c timestamp without time zone,
    d timestamp with time zone,
    e numeric(30,0)[],
    f numeric(10,2)[],
    g character varying(10)[],
    h character varying[],
    v tsvector
);

COMMENT ON TABLE test_class_r IS 'Comment1';

ALTER TABLE test_class_r ALTER h SET STORAGE external;

ALTER TABLE test_class_r ALTER b SET DEFAULT 'Hello, world!
'::text;

ALTER SEQUENCE test_class_r_a_seq OWNED BY test_class_r.a;

ALTER TABLE test_class_r ALTER e SET ( n_distinct = '10' );
ALTER TABLE test_class_r ALTER f SET ( n_distinct = '100' );

ALTER TABLE test_class_r ALTER h SET STATISTICS 50;


(1 row)
select replace(ddlx_alter('test_class_r'::regclass),'FUNCTION','PROCEDURE') as ddlx_alter;
ddlx_alter
ALTER TABLE test_class_r ALTER h SET STORAGE external;

ALTER TABLE test_class_r ALTER b SET DEFAULT 'Hello, world!
'::text;

ALTER SEQUENCE test_class_r_a_seq OWNED BY test_class_r.a;

ALTER TABLE test_class_r ALTER e SET ( n_distinct = '10' );
ALTER TABLE test_class_r ALTER f SET ( n_distinct = '100' );

ALTER TABLE test_class_r ALTER h SET STATISTICS 50;

ALTER TABLE test_class_r ADD CONSTRAINT test_class_r_b_key UNIQUE (b);
ALTER TABLE test_class_r ADD CONSTRAINT test_class_r_pkey PRIMARY KEY (a);
ALTER TABLE test_class_r ADD CONSTRAINT test_class_r_c_check CHECK (c > 'Mon Jan 01 00:00:00 2001'::timestamp without time zone);

CREATE UNIQUE INDEX idx1 ON public.test_class_r USING btree (lower(b)) WHERE (b IS NOT NULL);
CREATE INDEX idx2 ON public.test_class_r USING gin (v);
CREATE INDEX idx3 ON public.test_class_r USING btree (g) WITH (fillfactor='50');

CLUSTER test_class_r USING test_class_r_pkey;
CREATE TRIGGER aaaa BEFORE UPDATE ON test_class_r FOR EACH ROW WHEN (old.* IS DISTINCT FROM new.*) EXECUTE PROCEDURE trig('AAAA');
ALTER TABLE test_class_r DISABLE TRIGGER aaaa;


(1 row)
-----
-- test 'lite' option
select ddlx_create('test_class_r'::regclass,'{lite}');
ddlx_create

-- Type: TABLE ; Name: test_class_r; Owner: postgres

CREATE TABLE test_class_r (
    a integer NOT NULL DEFAULT nextval('test_class_r_a_seq'::regclass),
    b text NOT NULL DEFAULT 'Hello, world!
'::text,
    c timestamp without time zone,
    d timestamp with time zone,
    e numeric(30,0)[],
    f numeric(10,2)[],
    g character varying(10)[],
    h character varying[],
    v tsvector,
    CONSTRAINT test_class_r_b_key UNIQUE (b),
    CONSTRAINT test_class_r_pkey PRIMARY KEY (a),
    CONSTRAINT test_class_r_c_check CHECK (c > 'Mon Jan 01 00:00:00 2001'::timestamp without time zone)
);

COMMENT ON TABLE test_class_r IS 'Comment1';

CREATE UNIQUE INDEX idx1 ON public.test_class_r USING btree (lower(b)) WHERE (b IS NOT NULL);
CREATE INDEX idx2 ON public.test_class_r USING gin (v);
CREATE INDEX idx3 ON public.test_class_r USING btree (g) WITH (fillfactor='50');

GRANT DELETE ON test_class_r TO PUBLIC;
GRANT INSERT ON test_class_r TO PUBLIC;
GRANT REFERENCES ON test_class_r TO PUBLIC;
GRANT SELECT ON test_class_r TO PUBLIC;
GRANT TRIGGER ON test_class_r TO PUBLIC;
GRANT TRUNCATE ON test_class_r TO PUBLIC;
GRANT UPDATE ON test_class_r TO PUBLIC;

(1 row)
select ddlx_createonly('test_class_r'::regclass,'{lite}');
ddlx_createonly

-- Type: TABLE ; Name: test_class_r; Owner: postgres

CREATE TABLE test_class_r (
    a integer NOT NULL DEFAULT nextval('test_class_r_a_seq'::regclass),
    b text NOT NULL DEFAULT 'Hello, world!
'::text,
    c timestamp without time zone,
    d timestamp with time zone,
    e numeric(30,0)[],
    f numeric(10,2)[],
    g character varying(10)[],
    h character varying[],
    v tsvector,
    CONSTRAINT test_class_r_b_key UNIQUE (b),
    CONSTRAINT test_class_r_pkey PRIMARY KEY (a),
    CONSTRAINT test_class_r_c_check CHECK (c > 'Mon Jan 01 00:00:00 2001'::timestamp without time zone)
);

COMMENT ON TABLE test_class_r IS 'Comment1';


(1 row)
select ddlx_alter('test_class_r'::regclass,'{lite}');
ddlx_alter
CREATE UNIQUE INDEX idx1 ON public.test_class_r USING btree (lower(b)) WHERE (b IS NOT NULL);
CREATE INDEX idx2 ON public.test_class_r USING gin (v);
CREATE INDEX idx3 ON public.test_class_r USING btree (g) WITH (fillfactor='50');


(1 row)
-----
-- test referential constraints to the same table
create table ref1 (
    id integer unique REFERENCES ref1(id)
);
create table ref2 (
    id integer REFERENCES ref1(id)
);
select ddlx_script('ref1'::regclass);
ddlx_script
BEGIN;

/*
ALTER TABLE ref2 DROP CONSTRAINT ref2_id_fkey;
ALTER TABLE ref1 DROP CONSTRAINT ref1_id_fkey;

DROP TABLE ref1; --==>> !!! ATTENTION !!! <<==--
*/


-- Type: TABLE ; Name: ref1; Owner: postgres

CREATE TABLE ref1 (
    id integer
);


ALTER TABLE ref1 ADD CONSTRAINT ref1_id_key UNIQUE (id);


-- DEPENDANTS

ALTER TABLE ref1 ADD CONSTRAINT ref1_id_fkey
      FOREIGN KEY (id) REFERENCES ref1(id);

ALTER TABLE ref2 ADD CONSTRAINT ref2_id_fkey
      FOREIGN KEY (id) REFERENCES ref1(id);


END;

(1 row)
